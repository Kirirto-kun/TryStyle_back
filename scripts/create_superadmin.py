#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.
–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é ADMIN, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from src.utils.auth import get_password_hash
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL")
if DATABASE_URL and DATABASE_URL.startswith("postgres://"):
    DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql://", 1)

if not DATABASE_URL:
    raise ValueError("DATABASE_URL environment variable not set")

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


def check_enum_values():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ENUM role"""
    db = SessionLocal()
    try:
        result = db.execute(text("""
            SELECT e.enumlabel 
            FROM pg_type t 
            JOIN pg_enum e ON t.oid = e.enumtypid 
            WHERE t.typname = 'userrole'
            ORDER BY e.enumsortorder;
        """))
        enum_values = [row[0] for row in result.fetchall()]
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏: {enum_values}")
        return enum_values
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π ENUM: {str(e)}")
        return []
    finally:
        db.close()


def create_superadmin(email: str, username: str, password: str):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä—è–º—ã–µ SQL –∫–æ–º–∞–Ω–¥—ã
    
    Args:
        email: Email —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –ü–∞—Ä–æ–ª—å
    """
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
        result = db.execute(text("SELECT id, username, role FROM users WHERE email = :email"), {"email": email})
        existing_user = result.fetchone()
        
        if existing_user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email '{email}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            print(f"   ID: {existing_user[0]}")
            print(f"   Username: {existing_user[1]}")
            print(f"   –¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {existing_user[2]}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—ã—Å–∏—Ç—å
            if existing_user[2] != 'ADMIN':
                confirm = input(f"üîÑ –ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {existing_user[1]} –¥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞? (y/N): ").strip().lower()
                if confirm == 'y':
                    db.execute(
                        text("UPDATE users SET role = 'ADMIN', store_id = NULL WHERE id = :user_id"),
                        {"user_id": existing_user[0]}
                    )
                    db.commit()
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {existing_user[1]} –ø–æ–≤—ã—à–µ–Ω –¥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞!")
                    return True
            else:
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username
        result = db.execute(text("SELECT id, email, role FROM users WHERE username = :username"), {"username": username})
        existing_username = result.fetchone()
        
        if existing_username:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            print(f"   Email: {existing_username[1]}")
            print(f"   –†–æ–ª—å: {existing_username[2]}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω—ã–π email, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—ã—Å–∏—Ç—å
            if existing_username[1] == email and existing_username[2] != 'ADMIN':
                confirm = input(f"üîÑ –ü–æ–≤—ã—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –¥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞? (y/N): ").strip().lower()
                if confirm == 'y':
                    db.execute(
                        text("UPDATE users SET role = 'ADMIN', store_id = NULL WHERE id = :user_id"),
                        {"user_id": existing_username[0]}
                    )
                    db.commit()
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø–æ–≤—ã—à–µ–Ω –¥–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞!")
                    return True
            elif existing_username[1] == email and existing_username[2] == 'ADMIN':
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º!")
                return True
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        hashed_password = get_password_hash(password)
        
        db.execute(
            text("""
                INSERT INTO users (email, username, hashed_password, role, store_id, is_active, created_at) 
                VALUES (:email, :username, :password, 'ADMIN', NULL, true, NOW())
            """),
            {
                "email": email,
                "username": username,
                "password": hashed_password
            }
        )
        db.commit()
        
        print(f"‚úÖ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} ({email})")
        print(f"   üîë –ü–∞—Ä–æ–ª—å: {password}")
        print(f"   üéØ –†–æ–ª—å: ADMIN")
        print(f"   üöÄ –ü–æ–ª–Ω–æ–º–æ—á–∏—è: –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã")
        
        return True
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞: {str(e)}")
        return False
    finally:
        db.close()


def list_existing_admins():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        result = db.execute(text("""
            SELECT username, email, role, store_id, is_active 
            FROM users 
            WHERE role IN ('ADMIN', 'STORE_ADMIN')
            ORDER BY role, username
        """))
        admins = result.fetchall()
        
        print("\nüìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:")
        print("-" * 60)
        
        superadmins = [admin for admin in admins if admin[2] == 'ADMIN']
        store_admins = [admin for admin in admins if admin[2] == 'STORE_ADMIN']
        
        if superadmins:
            print("üöÄ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã:")
            for admin in superadmins:
                status = "–ê–∫—Ç–∏–≤–µ–Ω" if admin[4] else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                print(f"   ‚Ä¢ {admin[0]} ({admin[1]}) - {status}")
        else:
            print("üöÄ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã: –ù–µ—Ç")
        
        if store_admins:
            print("\nüè™ –ê–¥–º–∏–Ω—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤:")
            for admin in store_admins:
                store_info = f" [–ú–∞–≥–∞–∑–∏–Ω ID: {admin[3]}]" if admin[3] else " [–ë–µ–∑ –º–∞–≥–∞–∑–∏–Ω–∞]"
                status = "–ê–∫—Ç–∏–≤–µ–Ω" if admin[4] else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                print(f"   ‚Ä¢ {admin[0]} ({admin[1]}){store_info} - {status}")
        else:
            print("\nüè™ –ê–¥–º–∏–Ω—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤: –ù–µ—Ç")
        
        print("-" * 60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {str(e)}")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try:
            result = db.execute(text("SELECT username, email, role FROM users LIMIT 5"))
            users = result.fetchall()
            print("üîç –ü–µ—Ä–≤—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:")
            for user in users:
                print(f"   ‚Ä¢ {user[0]} ({user[1]}) - —Ä–æ–ª—å: {user[2]}")
        except Exception as debug_e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(debug_e)}")
    finally:
        db.close()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ENUM
    check_enum_values()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    list_existing_admins()
    
    # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    
    success = create_superadmin(email, username, password)
    
    if success:
        print(f"\nüéâ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"\nüìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
        print(f"   Email: {email}")
        print(f"   Password: {password}")
        print(f"\nüîó API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞:")
        print(f"   ‚Ä¢ POST /auth/token - –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        print(f"   ‚Ä¢ GET /api/v1/admin/* - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        print(f"   ‚Ä¢ POST /api/v1/admin/create-store-admin - —Å–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –º–∞–≥–∞–∑–∏–Ω–æ–≤")
        print(f"   ‚Ä¢ GET /api/v1/admin/store-admins - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏")
        print(f"   ‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º /api/v1/store-admin/* —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º")
    else:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")


if __name__ == "__main__":
    main() 