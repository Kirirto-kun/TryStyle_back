#!/usr/bin/env python
"""
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –∏ –∞–Ω–∞–ª–∏–∑ –∏—Ö features.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–ª—É—á—à–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ features.
"""
import sys
import os
from collections import defaultdict, Counter
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.database import get_db_session
from src.models.product import Product
from src.models.store import Store
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ SQLAlchemy
from src.models.review import Review
from src.models.user import User
from src.models.clothing import ClothingItem
from src.models.chat import Chat, Message
from src.models.tryon import TryOn
from src.models.waitlist import WaitListItem

def analyze_features_quality(features):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ features —Ç–æ–≤–∞—Ä–∞."""
    if not features:
        return {
            'score': 0,
            'quality': '–ù–ï–¢ FEATURES',
            'details': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç features'
        }
    
    feature_count = len(features)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    color_keywords = ['—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '—Å–∏–Ω–∏–π', '–∫—Ä–∞—Å–Ω—ã–π', '–∑–µ–ª–µ–Ω—ã–π', '—Å–µ—Ä—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '—Ä–æ–∑–æ–≤—ã–π', '–∂–µ–ª—Ç—ã–π', 'navy', 'black', 'white', 'blue', 'red', 'gray', 'pink']
    style_keywords = ['–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π', 'casual', '–¥–µ–ª–æ–≤–æ–π', 'vintage', 'modern', 'contemporary', 'relaxed', 'fitted', 'oversized']
    material_keywords = ['—Ö–ª–æ–ø–æ–∫', 'cotton', 'denim', 'wool', 'polyester', 'silk', 'leather', 'jersey', 'fleece']
    construction_keywords = ['–º–æ–ª–Ω–∏—è', '–ø—É–≥–æ–≤–∏—Ü—ã', '–∫–∞—Ä–º–∞–Ω—ã', '–∫–∞–ø—é—à–æ–Ω', '–≤–æ—Ä–æ—Ç–Ω–∏–∫', '–º–∞–Ω–∂–µ—Ç—ã', 'zip', 'button', 'pocket', 'hood', 'collar']
    
    categories_found = {
        'colors': sum(1 for f in features if any(color in f.lower() for color in color_keywords)),
        'styles': sum(1 for f in features if any(style in f.lower() for style in style_keywords)), 
        'materials': sum(1 for f in features if any(material in f.lower() for material in material_keywords)),
        'construction': sum(1 for f in features if any(construction in f.lower() for construction in construction_keywords))
    }
    
    total_categories = sum(1 for count in categories_found.values() if count > 0)
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    if feature_count >= 15 and total_categories >= 3:
        quality = '–û–¢–õ–ò–ß–ù–´–ï'
        score = 5
    elif feature_count >= 10 and total_categories >= 2:
        quality = '–•–û–†–û–®–ò–ï'
        score = 4
    elif feature_count >= 7 and total_categories >= 2:
        quality = '–°–†–ï–î–ù–ò–ï'
        score = 3
    elif feature_count >= 5:
        quality = '–ë–ê–ó–û–í–´–ï'
        score = 2
    else:
        quality = '–ü–õ–û–•–ò–ï'
        score = 1
    
    details = f"{feature_count} features, {total_categories} –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
    return {
        'score': score,
        'quality': quality,
        'details': details,
        'categories': categories_found,
        'count': feature_count
    }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞."""
    try:
        print("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–û–í –ò FEATURES –í –ö–ê–¢–ê–õ–û–ì–ï")
        print("=" * 80)
        
        db = get_db_session()
        products = db.query(Product).join(Store).order_by(Product.id).all()
        
        if not products:
            print("‚ùå –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç!")
            return
        
        print(f"üì¶ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ H&M –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω\n")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = {
            'total': len(products),
            'excellent': 0,  # 15+ features, 3+ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            'good': 0,       # 10+ features, 2+ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            'average': 0,    # 7+ features, 2+ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            'basic': 0,      # 5+ features
            'poor': 0,       # <5 features
            'no_features': 0
        }
        
        category_stats = defaultdict(list)
        all_features = []
        examples = {
            'excellent': [],
            'poor': [],
            'no_features': []
        }
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        for i, product in enumerate(products, 1):
            analysis = analyze_features_quality(product.features)
            
            print(f"{i:3d}. üìù {product.name}")
            print(f"     üí∞ ‚Ç∏{product.price:,.0f} | üìÇ {product.category} | üè™ {product.store.name}")
            
            if product.features:
                features_display = "', '".join(product.features[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                more_text = f" + –µ—â–µ {len(product.features) - 5}" if len(product.features) > 5 else ""
                print(f"     üè∑Ô∏è  [{analysis['count']}] Features: ['{features_display}']{more_text}")
                print(f"     ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {analysis['quality']} ({analysis['details']})")
            else:
                print("     ‚ùå –ù–ï–¢ FEATURES")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
            if analysis['score'] == 5:
                stats['excellent'] += 1
                if len(examples['excellent']) < 3:
                    examples['excellent'].append(product)
            elif analysis['score'] == 4:
                stats['good'] += 1
            elif analysis['score'] == 3:
                stats['average'] += 1
            elif analysis['score'] == 2:
                stats['basic'] += 1
            elif analysis['score'] == 1:
                stats['poor'] += 1
                if len(examples['poor']) < 3:
                    examples['poor'].append(product)
            else:
                stats['no_features'] += 1
                if len(examples['no_features']) < 3:
                    examples['no_features'].append(product)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_stats[product.category].append(analysis)
            
            if product.features:
                all_features.extend(product.features)
            
            print()
        
        # –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        print("\n" + "="*80)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê FEATURES")
        print("="*80)
        
        print(f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total']}")
        print(f"üåü –û—Ç–ª–∏—á–Ω—ã–µ features (15+ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫): {stats['excellent']} ({stats['excellent']/stats['total']*100:.1f}%)")
        print(f"‚úÖ –•–æ—Ä–æ—à–∏–µ features (10+ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫): {stats['good']} ({stats['good']/stats['total']*100:.1f}%)")
        print(f"üî∂ –°—Ä–µ–¥–Ω–∏–µ features (7+ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫): {stats['average']} ({stats['average']/stats['total']*100:.1f}%)")
        print(f"üî∏ –ë–∞–∑–æ–≤—ã–µ features (5+ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫): {stats['basic']} ({stats['basic']/stats['total']*100:.1f}%)")
        print(f"‚ö†Ô∏è  –ü–ª–æ—Ö–∏–µ features (<5 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫): {stats['poor']} ({stats['poor']/stats['total']*100:.1f}%)")
        print(f"‚ùå –ë–µ–∑ features: {stats['no_features']} ({stats['no_features']/stats['total']*100:.1f}%)")
        
        # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ö–æ—Ä–æ—à–∏–µ + –æ—Ç–ª–∏—á–Ω—ã–µ)
        quality_products = stats['excellent'] + stats['good']
        print(f"\nüéØ –¢–æ–≤–∞—Ä—ã —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ features: {quality_products} ({quality_products/stats['total']*100:.1f}%)")
        
        # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú
        print(f"\nüìÇ –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú –¢–û–í–ê–†–û–í")
        print("-"*60)
        
        for category, analyses in category_stats.items():
            if not analyses:
                continue
                
            avg_features = sum(a['count'] for a in analyses) / len(analyses)
            excellent_in_cat = sum(1 for a in analyses if a['score'] == 5)
            
            print(f"{category.upper():15s} | {len(analyses):3d} —Ç–æ–≤–∞—Ä–æ–≤ | {avg_features:5.1f} features –≤ —Å—Ä–µ–¥–Ω–µ–º | {excellent_in_cat} –æ—Ç–ª–∏—á–Ω—ã—Ö")
        
        # –ü–†–ò–ú–ï–†–´ –õ–£–ß–®–ò–• FEATURES
        print(f"\nüåü –ü–†–ò–ú–ï–†–´ –û–¢–õ–ò–ß–ù–´–• FEATURES (15+ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)")
        print("-"*80)
        
        for product in examples['excellent']:
            print(f"‚ú® {product.name}")
            print(f"   Features [{len(product.features)}]: {', '.join(product.features)}")
            print()
        
        # –ü–†–ò–ú–ï–†–´ –ü–õ–û–•–ò–• FEATURES
        if examples['poor']:
            print(f"‚ö†Ô∏è  –ü–†–ò–ú–ï–†–´ –¢–û–í–ê–†–û–í –° –ü–õ–û–•–ò–ú–ò FEATURES")
            print("-"*80)
            
            for product in examples['poor']:
                features_text = ', '.join(product.features) if product.features else "–ù–ï–¢"
                print(f"‚ùå {product.name}")
                print(f"   Features [{len(product.features) if product.features else 0}]: {features_text}")
                print()
        
        # –¢–û–ü FEATURES
        if all_features:
            print(f"üè∑Ô∏è  –¢–û–ü-20 –ü–û–ü–£–õ–Ø–†–ù–´–• FEATURES")
            print("-"*60)
            
            feature_counts = Counter(all_features)
            for feature, count in feature_counts.most_common(20):
                print(f"{feature:35s} | {count:3d} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("-"*40)
        
        if stats['no_features'] > 0:
            print(f"üî¥ {stats['no_features']} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ features - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        if stats['poor'] > 0:
            print(f"üü† {stats['poor']} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–ª–æ—Ö–∏–º–∏ features - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")
        
        improvement_percent = (quality_products / stats['total']) * 100
        if improvement_percent >= 70:
            print(f"üéâ –û–¢–õ–ò–ß–ù–û! {improvement_percent:.1f}% —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ features")
        elif improvement_percent >= 50:
            print(f"‚úÖ –•–û–†–û–®–û! {improvement_percent:.1f}% —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ features")
        else:
            print(f"‚ö†Ô∏è  –ù–£–ñ–ù–û –£–õ–£–ß–®–ò–¢–¨: —Ç–æ–ª—å–∫–æ {improvement_percent:.1f}% —Ç–æ–≤–∞—Ä–æ–≤ –∏–º–µ—é—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ features")
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if 'db' in locals():
            try:
                db.close()
                print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as close_error:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {close_error}")

if __name__ == "__main__":
    main() 